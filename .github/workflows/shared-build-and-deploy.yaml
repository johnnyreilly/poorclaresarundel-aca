name: Shared build and deploy

on:
  workflow_call:
    inputs:
      deploy:
        required: true
        type: boolean
      branchName:
        required: true
        type: string

    # secrets:
    #   personal_access_token:
    #     required: true
    # Map the workflow outputs to job outputs

    outputs:
      container-app-url:
        description: "The URL of the deployed container app"
        value: ${{ jobs.deploy.outputs.container-app-url }}

env:
  RESOURCE_GROUP: rg-poorclaresarundel
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-name: ${{ steps.vars.outputs.image_name }}
      sha-short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branchName }}

      - name: Set sha-short and image-name environment variables
        id: vars
        run: |
          image_name=$(echo "${{ env.REGISTRY }}/${{ github.repository }}/node-service" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          sha_short=$(echo "$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]')
          echo "sha_short=$sha_short" >> $GITHUB_OUTPUT

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image_name }}
          context: git # so it uses the git branch that is checked out
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: ${{ inputs.deploy }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    if: inputs.deploy == true
    needs: [build]
    outputs:
      container-app-url: ${{ steps.deploy.outputs.CONTAINER_APP_URL }}
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branchName }}

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure
        id: deploy
        uses: azure/CLI@v2
        with:
          inlineScript: |
            BRANCH_NAME="${{ inputs.branchName }}"
            SHA_SHORT="${{ needs.build.outputs.sha-short }}"
            REF_SHA="${{ inputs.branchName }}.${{ needs.build.outputs.sha-short }}"
            DEPLOYMENT_NAME="${REF_SHA////-}"
            echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME"

            webServiceImage="${{ needs.build.outputs.image-name }}:sha-$SHA_SHORT"
            echo "webServiceImage=$webServiceImage"

            if [ "$BRANCH_NAME" == "main" ]; then
              webServiceContainerAppName="main-web"
            else
              webServiceContainerAppName="preview-web"
            fi
            echo "webServiceContainerAppName=$webServiceContainerAppName"

            TAGS='{"owner":"johnnyreilly", "email":"johnny_reilly@hotmail.com"}'
            az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$DEPLOYMENT_NAME" \
              --template-file ./infra/main.bicep \
              --parameters \
                  webServiceImage="$webServiceImage" \
                  containerRegistry=${{ env.REGISTRY }} \
                  containerRegistryUsername=${{ github.actor }} \
                  containerRegistryPassword=${{ secrets.PACKAGES_TOKEN }} \
                  branchName="$BRANCH_NAME" \
                  gitSha="$SHA_SHORT" \
                  workspaceName='shared-log-analytics' \
                  appInsightsName='shared-app-insights' \
                  managedEnvironmentName='shared-env' \
                  webServiceContainerAppName="$webServiceContainerAppName" \
                  tags="$TAGS" \
                  APPSETTINGS_API_KEY="${{ secrets.APPSETTINGS_API_KEY }}" \
                  APPSETTINGS_DOMAIN="${{ vars.APPSETTINGS_DOMAIN }}" \
                  APPSETTINGS_PRAYER_REQUEST_FROM_EMAIL="${{ vars.APPSETTINGS_PRAYER_REQUEST_FROM_EMAIL }}" \
                  APPSETTINGS_PRAYER_REQUEST_RECIPIENT_EMAIL="${{ vars.APPSETTINGS_PRAYER_REQUEST_RECIPIENT_EMAIL }}"

            CONTAINER_APP_URL=$(az containerapp show \
              --resource-group '${{ env.RESOURCE_GROUP }}' \
              --name "$webServiceContainerAppName" \
              --query properties.configuration.ingress.fqdn \
              --output tsv)

            echo "CONTAINER_APP_URL=$CONTAINER_APP_URL"
            echo "CONTAINER_APP_URL=$CONTAINER_APP_URL" >> $GITHUB_OUTPUT
